{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(python:*)",
      "Bash(source:*)",
      "Bash(PYTHONPATH=/Users/yangyang/Github/auto-influencer-marketing/backend/src python -c \"from agent.phases.phase7_settle import create_settle_subgraph; print(''✅ Phase 7 import successful'')\")",
      "Bash(PYTHONPATH=/Users/yangyang/Github/auto-influencer-marketing/backend/src python -c \"\nfrom agent.phases.phase1_strategy import create_strategy_subgraph\nfrom agent.phases.phase2_discovery import create_discovery_subgraph  \nfrom agent.phases.phase3_outreach import create_outreach_subgraph\nfrom agent.phases.phase4_cocreation import create_cocreation_subgraph\nfrom agent.phases.phase5_publish import create_publish_subgraph\nfrom agent.phases.phase6_monitor import create_monitor_subgraph\nfrom agent.phases.phase7_settle import create_settle_subgraph\nprint(''✅ All 7 phase subgraphs imported successfully'')\n\")",
      "Bash(PYTHONPATH=/Users/yangyang/Github/auto-influencer-marketing/backend/src python -c \"\nfrom agent.phases.phase1_strategy import create_strategy_subgraph\nfrom agent.phases.phase2_discovery import create_discovery_subgraph  \nfrom agent.phases.phase3_outreach import create_outreach_subgraph\nfrom agent.phases.phase4_cocreation import create_cocreation_subgraph\nfrom agent.phases.phase5_publish import create_publish_subgraph\nfrom agent.phases.phase6_monitor import create_monitor_subgraph\nfrom agent.phases.phase7_settle import create_settle_subgraph\nprint(''✅ All 7 phase subgraphs imported successfully'')\n\")",
      "Bash(PYTHONPATH=/Users/yangyang/Github/auto-influencer-marketing/backend/src python -c \"\nfrom agent.phases.phase1_strategy import create_strategy_subgraph\nfrom agent.phases.phase2_discovery import create_discovery_subgraph  \nfrom agent.phases.phase3_outreach import create_outreach_subgraph\nfrom agent.phases.phase4_cocreation import create_cocreation_subgraph\nfrom agent.phases.phase5_publish import create_publish_subgraph\nfrom agent.phases.phase6_monitor import create_monitor_subgraph\nfrom agent.phases.phase7_settle import create_settle_subgraph\nprint(''✅ All 7 phase subgraphs imported successfully'')\n\")",
      "Bash(rg:*)",
      "Bash(LOG_LEVEL=INFO python test_logging_config.py)",
      "Bash(rm:*)",
      "Bash(npx:*)",
      "Bash(npm run build:*)",
      "Bash(sed:*)",
      "WebFetch(domain:langchain-ai.github.io)",
      "WebFetch(domain:changelog.langchain.com)",
      "Bash(timeout:*)",
      "Bash(mkdir:*)",
      "Bash(uv pip install:*)",
      "Bash(lsof:*)",
      "Bash(kill:*)",
      "Bash(uv show:*)",
      "Bash(uv pip show:*)",
      "Bash(OPENAI_API_KEY=\"dummy\" python -c \"\nfrom langchain_openai import ChatOpenAI\nimport inspect\n\n# Get all parameters\nsig = inspect.signature(ChatOpenAI.__init__)\nprint(''ChatOpenAI.__init__ parameters containing \"\"stream\"\":'')\nfor name, param in sig.parameters.items():\n    if ''stream'' in name.lower():\n        print(f''  {name}: {param.annotation} = {param.default}'')\n\nprint(''\\nAll ChatOpenAI parameters:'')\nfor name, param in list(sig.parameters.items())[:10]:  # First 10 only\n    print(f''  {name}: {param.default}'')\n\")",
      "Bash(chmod:*)",
      "Bash(./test_api_endpoints.sh:*)",
      "Bash(true)",
      "Bash(mv:*)",
      "Bash(./run_tests.sh:*)",
      "WebSearch"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}